#[derive(Debug, PartialEq, Eq, Clone, )]
pub enum Keyword {
    AlignAs, 
    AlignOf, 
    Auto, 
    Bool, 
    Break, 
    Case, 
    Char, 
    Const, 
    Constexpr, 
    Continue, 
    Default, 
    Do, 
    Double, 
    Else, 
    Enum, 
    Extern, 
    False, 
    Float, 
    For, 
    Goto, 
    If, 
    Inline, 
    Int, 
    Long, 
    Nullptr, 
    Register, 
    Restrict, 
    Return,  
    Short, 
    Signed, 
    Sizeof, 
    Static, 
    StaticAssert, 
    Struct, 
    Switch, 
    ThreadLocal, 
    True, 
    Typedef, 
    TypeOf, 
    TypeOfUnqual, 
    Union, 
    Unsigned, 
    Void, 
    Volatile, 
    While, 
    _AlignAs, 
    _AlignOf, 
    _Atomic, 
    _BigInt, 
    _Bool, 
    _Complex, 
    _Decimal128, 
    _Decimal32, 
    _Decimal64, 
    _Generic, 
    _Imaginary, 
    _Noreturn, 
    _StaticAssert, 
    _ThreadLocal, 
    Asm, 
    Fortran, 
}

impl Keyword {
    pub fn from_str_src(src: &str) -> Result<Keyword, ()> {
        use Keyword::*; 
        let ans = match src { 
            "alignas" => AlignAs, 
            "alignof" => AlignOf, 
            "auto" => Auto, 
            "bool" => Bool, 
            "break" => Break, 
            "case" => Case, 
            "char" => Char, 
            "const" => Const, 
            "constexpr" => Constexpr, 
            "continue" => Continue, 
            "default" => Default, 
            "do" => Do, 
            "double" => Double, 
            "else" => Else, 
            "enum" => Enum, 
            "extern" => Extern, 
            "false" => False, 
            "float" => Float, 
            "for" => For, 
            "goto" => Goto, 
            "if" => If, 
            "inline" => Inline, 
            "int" => Int, 
            "long" => Long, 
            "nullptr" => Nullptr, 
            "register" => Register, 
            "restrict" => Restrict, 
            "return" => Return, 
            "short" => Short, 
            "signed" => Signed, 
            "sizeof" => Sizeof, 
            "static" => Static, 
            "static_assert" => StaticAssert, 
            "struct" => Struct, 
            "switch" => Switch, 
            "thread_local" => ThreadLocal, 
            "true" => True, 
            "typedef" => Typedef, 
            "typeof" => TypeOf, 
            "typeof_unqual" => TypeOfUnqual, 
            "union" => Union, 
            "unsigned" => Unsigned, 
            "void" => Void, 
            "volatile" => Volatile, 
            "while" => While, 
            "_Alignas" => _AlignAs, 
            "_Alignof" => _AlignOf, 
            "_Atomic" => _Atomic, 
            "_Bool" => _Bool, 
            "_Complex" => _Complex, 
            "_Decimal128" => _Decimal128, 
            "_Decimal32" => _Decimal32, 
            "_Decimal64" => _Decimal64, 
            "_Generic" => _Generic, 
            "_Imaginary" => _Imaginary, 
            "_Noreturn" => _Noreturn, 
            "_Static_assert" => _StaticAssert, 
            "_Thread_local" => _ThreadLocal, 
            "asm" => Asm, 
            _ => return Err(()) 
        }; 
        return Ok(ans); 
    }
}

